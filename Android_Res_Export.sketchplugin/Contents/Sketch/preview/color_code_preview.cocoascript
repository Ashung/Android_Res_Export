@import "../lib/MochaJSDelegate.js";
@import "../lib/common.js";
@import "../lib/color.js";

var colorResourceCodeFromDocumentColor = function(context) {

    var doc = context.document;
    var documentData = doc.documentData()
    var documentColors = documentData.assets().colors();

    if (documentColors.count() == 0) {
        toast(context, localizedString(context, "no_document_color"));
        return;
    }

    var xml = '<?xml version="1.0" encoding="utf-8"?>\n<resources>\n';

    var colorNamesAndCount = NSMutableDictionary.alloc().init();
    var loopDocumentColors = documentColors.objectEnumerator();
    var color;
    while (color = loopDocumentColors.nextObject()) {
        var colorAlpha = color.alpha();
        var colorHex = color.immutableModelObject().hexValue();
        var colorName = getColorName(colorHex);
        var colorAndroid = colorToAndroid(color);
        if (colorAlpha != 1) {
            colorName += "_transparent";
        }

        if (colorNamesAndCount.objectForKey(colorName)) {
            var count = colorNamesAndCount.objectForKey(colorName) + 1;
            colorNamesAndCount.setObject_forKey(count, colorName);
        } else {
            colorNamesAndCount.setObject_forKey(1, colorName);
        }
        if (colorNamesAndCount.objectForKey(colorName) > 1) {
            colorName += "_" + colorNamesAndCount.objectForKey(colorName);
        }

        xml += '    <color name="' + colorName + '">' + colorAndroid + '</color>\n';
    }

    xml += "</resources>\n";

    showCodeWindow(context, xml);

    ga(context, "Preview", "color_resource_code_from_document_color");

};

var colorResourceCodeFromLayers = function(context) {

    var doc = context.document;
    var selection = context.selection;

    if (selection.count() == 0) {
        toast(context, localizedString(context, "no_selected_shape_layer"));
        return;
    }

    var colorsDictionary = NSMutableDictionary.alloc().init();
    var baseColorNamesAndCount = NSMutableDictionary.alloc().init();

    var loopSelection = selection.objectEnumerator();
    var layer;
    while (layer = loopSelection.nextObject()) {

        // Name
        var layerName = layerNameToXMLValue(layer.name());
        if (baseColorNamesAndCount.objectForKey(layerName)) {
            var count = baseColorNamesAndCount.objectForKey(layerName) + 1;
            baseColorNamesAndCount.setObject_forKey(count, layerName);
        } else {
            baseColorNamesAndCount.setObject_forKey(1, layerName);
        }
        if (baseColorNamesAndCount.objectForKey(layerName) > 1) {
            layerName += "_" + baseColorNamesAndCount.objectForKey(layerName);
        }

        // Color
        if (layer.class() == "MSShapeGroup") {
            if (layer.style().enabledFills().count() > 0) {
                var fillType = layer.style().enabledFills().lastObject().fillType();
                if (fillType == 0) {
                    var lastColor = layer.style().enabledFills().lastObject().color();
                    var color = colorToAndroid(lastColor);
                    var name = layerName;
                    colorsDictionary.setObject_forKey(color, name);
                }
                if (fillType == 1) {
                    var stops = layer.style().enabledFills().lastObject().gradient().stops();
                    var loopStops = stops.objectEnumerator();
                    var stopIndex = 1;
                    var stop;
                    while (stop = loopStops.nextObject()) {
                        var color = colorToAndroid(stop.color());
                        var name = layerName + "_gradient_stop_" + stopIndex;
                        stopIndex ++;
                        colorsDictionary.setObject_forKey(color, name);
                    }
                }
            }
        }

    }

    if (colorsDictionary.allValues().count() == 0) {
        toast(context, localizedString(context, "no_color_in_selected_layers"));
        return;
    }

    var allKeys = colorsDictionary.allKeys().mutableCopy();
    allKeys.sort(function(a, b) {
        if (a > b) {
            return 1;
        }
        if (a < b) {
            return -1;
        }
        return a - b;
    });

    var xml = '<?xml version="1.0" encoding="utf-8"?>\n<resources>\n';

    for (var i = 0; i < allKeys.length; i ++) {
        var key = allKeys[i];
        var color = colorsDictionary.objectForKey(key);
        xml += '    <color name="' + key + '">' + color + '</color>\n';
    }

    xml += "</resources>\n";

    showCodeWindow(context, xml);

    ga(context, "Preview", "color_resource_code_from_selected_layer");

};

function layerNameToXMLValue(name) {
    var result = name.replace(/[^A-Za-z0-9\s\_]/g, "")
        .replace(/^\d+/, "")
        .trim()
        .replace(/\s+/g, "_")
        .toLowerCase();
    if (result == "") {
        return "untitled";
    } else {
        return result;
    }
}

function showCodeWindow(context, xml) {
    window(
        context,
        localizedString(context, "code_preview"),
        "code_preview.html",
        function(scriptObject) {

            // Translation HTML
            var currentLanguageSetting = getPreferences(context, "language");
            if (currentLanguageSetting != "en") {
                var languageJSON = {
                    "cancel": localizedString(context, "cancel"),
                    "save": localizedString(context, "save")
                };
                scriptObject.evaluateWebScript('i18n(' + JSON.stringify(languageJSON) + ')');
            }

            xml = xml.replace(/\n/g, "\\n");
            scriptObject.evaluateWebScript("previewCode('" + xml + "')");
        },
        function(locationHash) {

            if (locationHash == "#save") {
                NSApp.stopModal();

                var exportFolder = chooseFolder();
                if (exportFolder) {

                    if (!directoryIsWriteable(exportFolder)) {
                        toast(context, localizedString(context, "cannot_export_to_folder"));
                        return;
                    }

                    mkdir(exportFolder + "/values/");

                    writeContentToFile(exportFolder + "/values/colors.xml", xml);

                    if (getPreferences(context, "show_in_finder_after_export") == 1) {
                        showInFinder(exportFolder + "/values");
                    }

                }
            }

            if (locationHash == "#cancel") {
                NSApp.stopModal();
            }

        }
    );
}
