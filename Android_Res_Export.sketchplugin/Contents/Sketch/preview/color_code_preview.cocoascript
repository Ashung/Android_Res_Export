@import "../lib/MochaJSDelegate.js";
@import "../lib/common.js";
@import "../lib/color.js";

var colorResourceCodeFromDocumentColor = function(context) {

    var doc = context.document;
    var documentData = doc.documentData()
    var documentColors = documentData.assets().colors();

    if (documentColors == 0) {
        toast(context, localizedString(context, "no_document_color"));)
        return;
    }

    var code = '<?xml version="1.0" encoding="utf-8"?>\\n<resources>\\n'

    var colorNamesAndCount = NSMutableDictionary.alloc().init();
    var loopDocumentColors = documentColors.objectEnumerator();
    var color;
    while (color = loopDocumentColors.nextObject()) {
        var colorAlpha = color.alpha();
        var colorHex = color.immutableModelObject().hexValue();
        var colorName = getColorName(colorHex);
        var colorAndroid = colorToAndroid(color);
        if (colorAlpha != 1) {
            colorName += "_transparent";
        }

        if (colorNamesAndCount.objectForKey(colorName)) {
            var count = colorNamesAndCount.objectForKey(colorName) + 1;
            colorNamesAndCount.setObject_forKey(count, colorName);
        } else {
            colorNamesAndCount.setObject_forKey(1, colorName);
        }
        if (colorNamesAndCount.objectForKey(colorName) > 1) {
            colorName += "_" + colorNamesAndCount.objectForKey(colorName);
        }

        code += '    <color name="' + colorName + '">' + colorAndroid + '</color>\\n';
    }

    code += "</resources>\\n";

    window(
        context,
        localizedString(context, "code_preview"),
        "code_preview.html",
        function(scriptObject) {

            // Translation HTML
            var currentLanguageSetting = getPreferences(context, "language");
            if (currentLanguageSetting != "en") {
                var languageJSON = {
                    "cancel": localizedString(context, "cancel"),
                    "save": localizedString(context, "save")
                };
                scriptObject.evaluateWebScript('i18n(' + JSON.stringify(languageJSON) + ')');
            }

            scriptObject.evaluateWebScript("previewCode('" + code + "')");
        },
        function(locationHash) {

            if (locationHash == "#save") {
                NSApp.stopModal();

                var exportFolder = chooseFolder();
                if (exportFolder) {

                    if (!directoryIsWriteable(exportFolder)) {
                        toast(context, localizedString(context, "cannot_export_to_folder"));
                        return;
                    }

                    mkdir(exportFolder + "/values/");

                    code = code.replace(/\\n/g, "\n");
                    writeContentToFile(exportFolder + "/values/colors.xml", code);

                    if (getPreferences(context, "show_in_finder_after_export") == 1) {
                        showInFinder(exportFolder + "/values");
                    }

                }
            }

            if (locationHash == "#cancel") {
                NSApp.stopModal();
            }

        }
    );

    ga(context, "Preview", "color_code_preview");

};
