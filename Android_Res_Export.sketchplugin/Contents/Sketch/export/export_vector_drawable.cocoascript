//
// Android Res Export
// Homepage: https://github.com/Ashung/Android_Res_Export
// Author: Ashung Hung
// Email: Ashung.hung@gmail.com
// License: https://creativecommons.org/licenses/by-sa/4.0

@import "../lib/common.js";

var onRun = function(context) {

    // SVGO
    var svgo = which("svgo");

    // SVG2VectorDrawable
    var s2v = which("s2v");

    if (!svgo && !s2v) {
        alert(
            localizedString(context, "install_svg_and_s2v_title"),
            localizedString(context, "install_svg_and_s2v_message")
        );
        return;
    }

    var doc = context.document;
    var selection = context.selection;

    var exportVectors = NSMutableArray.alloc().init();

    if (selection.count() > 0) {
        var loopSelection = selection.objectEnumerator();
        var layer;
        while (layer = loopSelection.nextObject()) {
            if (layer.class() == "MSSliceLayer" && layer.name() == "#vector") {
                exportVectors.addObject({
                    "slice": layer,
                    "name": androidResName(layer.parentGroup().name()),
                });
            }
            if (layer.class() == "MSLayerGroup" || layer.class() == "MSArtboardGroup" || layer.class() == "MSSymbolMaster") {
                var loopChildren = layer.children().objectEnumerator();
                var child;
                while (child = loopChildren.nextObject()) {
                    if (child.class() == "MSSliceLayer" && child.name() == "#vector") {
                        exportVectors.addObject({
                            "slice": child,
                            "name": androidResName(child.parentGroup().name()),
                        });
                    }
                }
            }
        }
    } else {
        var loopAllExportableLayers = doc.allExportableLayers().objectEnumerator();
        var layer;
        while (layer = loopAllExportableLayers.nextObject()) {
            if (layer.class() == "MSSliceLayer" && layer.name() == "#vector") {
                exportVectors.addObject({
                    "slice": layer,
                    "name": androidResName(layer.parentGroup().name()),
                });
            }
        }
    }

    // log(exportVectors);

    if (exportVectors.count() > 0) {

        var exportFolder = chooseFolder();

        if (exportFolder) {

            var loopExportVectors = exportVectors.objectEnumerator();
            var vector;
            while (vector = loopExportVectors.nextObject()) {

                var svgFile = exportFolder + "/" + vector.name + ".svg";
                doc.saveArtboardOrSlice_toFile(vector.slice, svgFile);

                optimizeSVG(svgo, svgFile);

                svg2vector(s2v, svgFile, exportFolder + "/res/drawable-anydpi-v21/" + vector.name + ".xml");

                rm(svgFile);

            }

            if (getPreferences(context, "show_in_finder_after_export") == 1) {
                openInFinder(exportFolder);
            }

        }

    } else {
        toast(context, localizedString(context, "no_vector_drawable_asset"));
    }

    ga(context, "Export", "export_vector_drawable", "Export");

}

function optimizeSVG(svgo, svgIn) {
    var config = {
        plugins: [
            {
                cleanupListOfValues: {
                    floatPrecision: 2
                }
            },
            {
                cleanupNumericValues: {
                    floatPrecision: 2
                }
            },
            {
                convertPathData: {
                    floatPrecision: 2,
                    leadingZero: false
                }
            }
        ]
    };
    runCommand("/bin/bash", ["-l", "-c", svgo + " --config='" + JSON.stringify(config) + "' '" + svgIn + "'"]);
}

function svg2vector(s2v, svgFile, vectorFile) {
    runCommand("/bin/bash", ["-l", "-c", s2v + " '" + svgFile + "' '" + vectorFile + "'"]);
}
