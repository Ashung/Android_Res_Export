/*----------------------------------------------------------

Android Res Export
https://github.com/Ashung/Android_Res_Export

Copyright 2017 Ashung Hung (Ashung.hung@gmail.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------*/

@import "../lib/common.js";

var onRun = function(context) {

    var doc = context.document;
    var selection = context.selection;

    var exportAssets = NSMutableArray.alloc().init();

    if (selection.count() > 0) {
        var loopSelection = selection.objectEnumerator();
        var layer;
        while (layer = loopSelection.nextObject()) {
            if (layer.class() == "MSSliceLayer" && layer.name() != "#9patch" && layer.name() != "#vector") {
                exportAssets.addObject(layer);
            }
            if (layer.class() == "MSLayerGroup" || layer.class() == "MSArtboardGroup" || layer.class() == "MSSymbolMaster") {
                var loopChildren = layer.children().objectEnumerator();
                var child;
                while (child = loopChildren.nextObject()) {
                    if (child.class() == "MSSliceLayer" && layer.name() != "#9patch" && layer.name() != "#vector") {
                        exportAssets.addObject(child);
                    }
                }
            }
        }
    } else {
        var loopAllExportableLayers = doc.allExportableLayers().objectEnumerator();
        var layer;
        while (layer = loopAllExportableLayers.nextObject()) {
            if (layer.class() == "MSSliceLayer" && layer.name() != "#9patch" && layer.name() != "#vector") {
                exportAssets.addObject(layer);
            }
        }
    }

    if (exportAssets.count() > 0) {

        var exportFolder = chooseFolder();

        if (exportFolder) {

            // ExportFolder is writeable
            if (!directoryIsWriteable(exportFolder + "/res")) {
                toast(context, localizedString(context, "cannot_export_to_folder"));
                return;
            }

            var loopExportAssets = exportAssets.objectEnumerator();
            var slice;
            while (slice = loopExportAssets.nextObject()) {

                var exportConfig = getExportConfigFromPageName(slice.parentPage().name());

                var tempSlice = slice.duplicate();
                tempSlice.exportOptions().removeAllExportFormats();

                for (var i = 0; i < exportConfig.length; i++) {
                    var exportOption = tempSlice.exportOptions().addExportFormat();
                    exportOption.setFileFormat("png");
                    exportOption.setScale(exportConfig[i]["scale"]);
                    exportOption.setNamingScheme(1);
                    exportOption.setName("drawable-" + exportConfig[i]["qualifier"] + "/");
                }

                var exportRequests = MSExportRequest.exportRequestsFromExportableLayer(tempSlice);
                var loopExportRequests = exportRequests.objectEnumerator();
                var exportRequest;
                while (exportRequest = loopExportRequests.nextObject()) {

                    var output = exportFolder + "/" + exportRequest.name() + ".png";
                    doc.saveArtboardOrSlice_toFile(exportRequest, output);

                    if (getPreferences(context, "use_imageoptim_after_export") == 1) {
                        imageOptim(output);
                    }
                }

                tempSlice.removeFromParent();

            }

            if (getPreferences(context, "show_in_finder_after_export") == 1) {
                showInFinder(exportFolder);
            }

        }

    } else {
        toast(context, localizedString(context, "no_png_asset"));
    }

    ga(context, "Export", "export_png_assets");

}
