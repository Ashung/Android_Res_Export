//
// Android Res Export
// Homepage: https://github.com/Ashung/Android_Res_Export
// Author: Ashung Hung
// Email: Ashung.hung@gmail.com
// License: https://creativecommons.org/licenses/by-sa/4.0

@import "../lib/common.js";

var selection = context.selection;

if (selection.count() > 0) {

    var layer = selection.firstObject();

    layerInfo(layer);
}

function layerInfo(layer) {
    var result = {};
    if (layer.class() == "MSShapeGroup") {
        if (layer.children().count() == 2) {
            var shapePath = layer.children().firstObject();
            if (shapePath.class() == "MSRectangleShape" || shapePath.class() == "MSOvalShape") {

                var fills = layer.style().enabledFills();
                if (fills.count() > 0) {
                    if (fills.lastObject().fillType() == 0) {
                        result.support = true;
                        result.solid = colorToAndroid(fills.lastObject().color());
                    } else if (fills.lastObject().fillType() == 1) {
                        result.support = true;
                        var gradient = fills.lastObject().gradient();
                        if (gradient.stops().count() < 4) {

                            var gradientType = gradient.gradientType();
                            switch (gradientType) {
                                case 2:
                                    result.gradientType = "sweep";
                                    break;
                                case 1:
                                    result.gradientType = "radial";
                                    break;
                                case 0:
                                    result.gradientType = "linear";
                                    break;
                                default:
                                    result.gradientType = "linear";
                            }

                            result.gradientStops = gradientStopsToColorArray(gradient.stops());

                            // log(gradient.from());
                            //
                            // log(gradient.to());

                            var x1 = gradient.from().x * layer.frame().width();
                            var y1 = gradient.from().y * layer.frame().height();
                            var x2 = gradient.to().x * layer.frame().width();
                            var y2 = gradient.to().y * layer.frame().height();
                            var angle = Math.atan(Math.abs(y1 - y2) / Math.abs(x1 - x2)) * 180 / Math.PI;

                            log(angle);

                        } else {
                            result.support = false;
                            result.msg = "too many color stop in gradient";
                            return result;
                        }

                    } else {
                        result.support = false;
                        result.msg = "no support fill type";
                        return result;
                    }
                } else {
                    result.support = true;
                    result.solid = "#000000";
                }

                var borders;



                if (result.support) {




                    if (shapePath.class() == "MSRectangleShape") {
                        result.type = "rectangle"

                        // radius



                    } else {
                        result.type = "oval"
                    }
                }

            } else {
                // no support shape
                result.support = false;
                result.msg = "no support shape 1";
                return result;
            }
        } else if (layer.children().count() == 3) {

            if (
                layer.children().objectAtIndex(0).class() == "MSOvalShape" &&
                layer.children().objectAtIndex(1).class() == "MSOvalShape"
            ) {
                result.support = true;
                result.type = "ring";





            } else {
                result.support = false;
                result.msg = "no support shape 2";
                return result;
            }

        } else {
            result.support = false;
            result.msg = "no support shape 3";
            return result;
        }
    } else {
        result.support = false;
        result.msg = "no shape layer";
        return result;
    }


    log(result);
}

function gradientStopsToColorArray(stops) {
    var result = [];
    var loop = stops.objectEnumerator();
    while (stop = loop.nextObject()) {
        result.push(colorToAndroid(stop.color()));
    }
    return result;
}

function colorToAndroid(mscolor) {
    var alpha = mscolor.alpha();
    var hex = mscolor.immutableModelObject().hexValue();
    if (alpha < 1) {
        var alphaHex = Math.round(alpha * 255).toString(16);
        if (alphaHex.length == 1) {
            alphaHex = "0" + alphaHex;
        }
        return alphaHex.toUpperCase() + hex;
    } else {
        return hex;
    }
}



// var onRun = function(context) {

    // https://developer.android.com/guide/topics/resources/drawable-resource.html#Shape
// }

// <?xml version="1.0" encoding="utf-8"?>
// <shape
//     xmlns:android="http://schemas.android.com/apk/res/android"
//     android:shape=["rectangle" | "oval" | "line" | "ring"] >
//     <corners
//         android:radius="integer"
//         android:topLeftRadius="integer"
//         android:topRightRadius="integer"
//         android:bottomLeftRadius="integer"
//         android:bottomRightRadius="integer" />
//     <gradient
//         android:angle="integer"
//         android:centerX="float"
//         android:centerY="float"
//         android:centerColor="integer"
//         android:endColor="color"
//         android:gradientRadius="integer"
//         android:startColor="color"
//         android:type=["linear" | "radial" | "sweep"]
//         android:useLevel=["true" | "false"] />
//     <size
//         android:width="integer"
//         android:height="integer" />
//     <solid
//         android:color="color" />
//     <stroke
//         android:width="integer"
//         android:color="color"
//         android:dashWidth="integer"
//         android:dashGap="integer" />
// </shape>



//         if (layer.class() == "MSShapeGroup") {
//
//             // Rect
//
//             if (
//                 layer.children().count() == 2 &&
//                 layer.children().firstObject().path().isRectangle()
//             ) {
//
//                 var xml ='\
// <?xml version="1.0" encoding="utf-8"?>\n\
// <shape xmlns:android="http://schemas.android.com/apk/res/android"\n\
//     android:shape="rectangle">\n';
//
//                 var width = layer.frame().width(),
//                     height = layer.frame().height();
//                 xml += '\
//     <size\n\
//         android:width="' + width + 'dp"\n\
//         android:height="' + height + 'dp"/>\n';
//
//                 if (layer.style().enabledFills().count() > 0) {
//                     var fill = layer.style().enabledFills().lastObject();
//
//                     if (fill.fillType() == 0) {
//                         var color = fill.color();
//                         xml += '\
//     <solid\n\
//         android:color="' + nsColorToAndroid(color) + '"/>\n';
//                     }
//
//                     if (fill.fillType() == 1) {
//                         var gradient = fill.gradient();
//
//                         var androidGradientType = "linear";
//                         // gradient.gradientType() == 0
//                         switch (gradient.gradientType()) {
//                             case 2:
//                                 androidGradientType = "sweep";
//                                 break;
//                             case 1:
//                                 androidGradientType = "radial";
//                                 break;
//                             default:
//                                 androidGradientType = "linear";
//                         }
//
//
//
//
//                     }
//
//
//                 }
//
//                 var points = layer.children().firstObject().path().points();
//                 var radius,
//                     radiusTopLeft = points.objectAtIndex(0).cornerRadius(),
//                     radiusTopRight = points.objectAtIndex(1).cornerRadius(),
//                     radiusBottomRight = points.objectAtIndex(2).cornerRadius(),
//                     radiusBottomLeft = points.objectAtIndex(3).cornerRadius();
//
//                 if (radiusTopLeft == radiusTopRight == radiusBottomRight == radiusBottomLeft) {
//                     radius = radiusTopLeft;
//                 }
//
//             }
//
//
//         }
//
