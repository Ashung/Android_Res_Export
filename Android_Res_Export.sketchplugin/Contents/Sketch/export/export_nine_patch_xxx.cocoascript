@import "../lib/common.js";

var onRun = function(context) {

    ga(context, "Export", "export_nine_patch");

    // ImageMagick
    var convert = which("convert");
    if (!convert) {
        alert(
            context,
            localizedString(context, "install_imagemagick_title"),
            localizedString(context, "install_imagemagick_message")
        );
        return;
    }

    var doc = context.document;
    var selection = context.selection;

    var exportNinePatches;
    if (selection.count() > 0) {
        exportNinePatches = getNinePatchAssetFromSelection(context);
    } else {
        exportNinePatches = getNinePatchAssetFromDocument(context);
    }

    if (exportNinePatches.count() == 0) {
        toast(context, localizedString(context, "no_nine_patch_asset"));
        return;
    }

    var exportFolder = chooseFolder();
    if (exportFolder) {

        // ExportFolder is writeable
        if (!directoryIsWriteable(exportFolder)) {
            toast(context, localizedString(context, "cannot_export_to_folder"));
            return;
        }

        // Get export dpis
        var exportDpis = getPreferences(context, "export_dpis");
        if (!exportDpis) {
            exportDpis = Object.keys(DPIS);
        }

        var assetNameType = getPreferences(context, "asset_name_type");

        var loopExportNinePatches = exportNinePatches.objectEnumerator();
        var ninePatch;
        while (ninePatch = loopExportNinePatches.nextObject()) {

            var ninePatchContent = ninePatch.content,
                ninePatchContentID = ninePatch.content.objectID(),
                ninePatchPatch = ninePatch.patch,
                ninePatchPatchID = ninePatch.patch.objectID(),
                ninePatchName = assetName(ninePatch.name, assetNameType),
                ninePatchWidth = ninePatch.width,
                ninePatchHeight = ninePatch.height;

            // Patch lines round to pixel
            var loopNinePatchLines = ninePatchPatch.children().objectEnumerator();
            var line;
            while (line = loopNinePatchLines.nextObject()) {
                if (line.class() == "MSShapeGroup") {
                    line.absoluteRect().setX(Math.round(line.absoluteRect().x()));
                    line.absoluteRect().setY(Math.round(line.absoluteRect().y()));
                    var width = Math.round(line.absoluteRect().width()) < 1 ? 1 : Math.round(line.absoluteRect().width());
                    var height = Math.round(line.absoluteRect().height()) < 1 ? 1 : Math.round(line.absoluteRect().height());
                    line.absoluteRect().setWidth(width);
                    line.absoluteRect().setHeight(height);
                }
            }

            // Export nine-patch patch lines at mdpi
            var exportRequestForPatch = MSExportRequest.exportRequestsFromLayerAncestry(ninePatchPatch.ancestry()).firstObject();
            exportRequestForPatch.setFormat("png");
            exportRequestForPatch.setScale(1);
            doc.saveExportRequest_toFile(exportRequestForPatch, exportFolder + "/" + ninePatchPatchID + ".png");

            createMdpiPatchLines(
                convert,
                exportFolder,
                ninePatchWidth,
                ninePatchHeight,
                ninePatchPatchID,
                function(success, message) {
                    if (success == true) {
                        rm(exportFolder + "/" + ninePatchPatchID + ".png");
                    }
                }
            );

            // Export nine-patch content
            var exportRequest = MSExportRequest.exportRequestsFromLayerAncestry(ninePatchContent.ancestry()).firstObject();
            exportRequest.setFormat("png");

            exportDpis.forEach(function(dpi) {

                var scale = dpiToScale(dpi);
                exportRequest.setScale(scale);
                doc.saveExportRequest_toFile(exportRequest, exportFolder + "/" + ninePatchContentID + ".png");

                var outputFolder = exportFolder + "/drawable-" + dpi;
                var outputImage = outputFolder + "/" + ninePatchName + ".9.png";

                mkdir(outputFolder);

                createNinePatch(
                    convert,
                    exportFolder,
                    scale,
                    outputImage,
                    ninePatchWidth,
                    ninePatchHeight,
                    ninePatchContentID,
                    ninePatchPatchID,
                    function(success, message) {
                        // log(message);
                        if (success == true) {
                            rm(exportFolder + "/" + ninePatchContentID + ".png");
                            if (getPreferences(context, "use_imageoptim_after_export") == 1) {
                                imageOptim(outputImage);
                            }
                        }
                    }
                );

            });

            // Remove nine-patch patch lines
            rm(exportFolder + "/" + ninePatchPatchID + "_top.png");
            rm(exportFolder + "/" + ninePatchPatchID + "_right.png");
            rm(exportFolder + "/" + ninePatchPatchID + "_bottom.png");
            rm(exportFolder + "/" + ninePatchPatchID + "_left.png");

        }

        if (getPreferences(context, "show_in_finder_after_export") == 1) {
            showInFinder(exportFolder);
        }

    }
};

function getNinePatchAssetFromDocument(context) {
    var assets = NSMutableArray.alloc().init();
    var predicate = NSPredicate.predicateWithFormat(
        'className == "MSSliceLayer" && name == "#9patch" && exportOptions.firstFormat == "png"'
    );
    var ninePathSlices = context.document.allExportableLayers().filteredArrayUsingPredicate(predicate);
    var loopSlices = ninePathSlices.objectEnumerator();
    var slice;
    while (slice = loopSlices.nextObject()) {
        if (isNinePatchLayerGroup(slice)) {
            assets.addObject({
                "patch": getLayerWithNameFromParent("patch", slice.parentGroup().parentGroup()),
                "content": slice,
                "name": slice.parentGroup().parentGroup().name(),
                "width": slice.frame().width(),
                "height": slice.frame().height()
            });
        }
    }
    return assets;
}

function getNinePatchAssetFromSelection(context) {
    var assets = NSMutableArray.alloc().init();
    var predicate = NSPredicate.predicateWithFormat(
        'className == "MSSliceLayer" && name == "#9patch" && exportOptions.firstFormat == "png"',
    );
    var selection = context.selection;
    selection.forEach(function(layer) {
        var ninePathSlices = layer.children().filteredArrayUsingPredicate(predicate);
        var loopSlices = ninePathSlices.objectEnumerator();
        var slice;
        while (slice = loopSlices.nextObject()) {
            if (isNinePatchLayerGroup(slice)) {
                assets.addObject({
                    "patch": getLayerWithNameFromParent("patch", slice.parentGroup().parentGroup()),
                    "content": slice,
                    "name": slice.parentGroup().parentGroup().name(),
                    "width": slice.frame().width(),
                    "height": slice.frame().height()
                });
            }
        }
    });
    return assets;
}

function isNinePatchLayerGroup(sliceLayer) {
    var result = false;
    if(sliceLayer.parentGroup().parentGroup().class() != "MSPage") {
        var root = sliceLayer.parentGroup().parentGroup();
        if(
            (root.layers().indexOfObject(getLayerWithNameFromParent("patch", root)) < root.layers().count()) &&
            sliceLayer.parentGroup().name() == "content"
        ) {
            result = true;
        }
    }
    return result;
}

function createMdpiPatchLines(convert, cwd, width, height, mdpiPatchId, callback) {
    var command = "/bin/bash";
    var args = [
        "-l",
        "-c",
        'cd "' + cwd + '" && '
            + convert + ' -crop ' + Math.floor(width) + 'x1+1+0 '
                + mdpiPatchId + '.png ' + mdpiPatchId + '_top.png && '
            + convert + ' -crop 1x' + Math.floor(height) + '+' + (Math.floor(width)+1) + '+1 '
                + mdpiPatchId + '.png ' + mdpiPatchId + '_right.png && '
            + convert + ' -crop ' + Math.floor(width) + 'x1+1+' + (Math.floor(height)+1) + ' '
                + mdpiPatchId + '.png ' + mdpiPatchId + '_bottom.png && '
            + convert + ' -crop 1x' + Math.floor(height) + '+0+1 '
                + mdpiPatchId + '.png ' + mdpiPatchId + '_left.png'
    ];
    runCommand(command, args, callback);
}

function createNinePatch(convert, cwd, scale, output, width, height, contentId, patchId, callback) {
    var newWidth = Math.floor(width * scale);
    var newHeight = Math.floor(height * scale);
    // var temp = contentId + "_temp" + suffix + ".png";
    var content = contentId + ".png";
    var patchTop = patchId + "_top.png";
    var patchRight = patchId + "_right.png";
    var patchBottom = patchId + "_bottom.png";
    var patchLeft = patchId + "_left.png";
    var command = "/bin/bash";
    var args = [
        "-l",
        "-c",
        'cd "' + cwd + '" && '
            + convert + ' -size ' + (newWidth + 2) + 'x' + (newHeight + 2) + ' xc:none '
            + content + ' -gravity Center -composite '
            + '\\( -resize ' + newWidth + 'x1! -filter point -interpolate Nearest '
                + patchTop + ' \\) -gravity North -composite '
            + '\\( -resize 1x' + newHeight + '! -filter point -interpolate Nearest '
                + patchRight + ' \\) -gravity East -composite '
            + '\\( -resize ' + newWidth + 'x1! -filter point -interpolate Nearest '
                + patchBottom + ' \\) -gravity South -composite '
            + '\\( -resize 1x' +  newHeight + '! -filter point -interpolate Nearest '
                + patchLeft + ' \\) -gravity West -composite '
            + output
    ];
    runCommand(command, args, callback);
}
