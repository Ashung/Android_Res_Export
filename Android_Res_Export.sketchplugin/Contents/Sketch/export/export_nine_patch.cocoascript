@import "../lib/common.js";

var onRun = function(context) {

    ga(context, "Export", "export_nine_patch");

    var doc = context.document;
    var selection = context.selection;

    var exportNinePatches;
    if (selection.count() > 0) {
        exportNinePatches = getNinePatchAssetFromSelection(context);
    } else {
        exportNinePatches = getNinePatchAssetFromDocument(context);
    }

    if (exportNinePatches.count() == 0) {
        toast(context, localizedString(context, "no_nine_patch_asset"));
        return;
    }

    var exportFolder = chooseFolder();
    if (exportFolder) {

        // ExportFolder is writeable
        if (!directoryIsWriteable(exportFolder)) {
            toast(context, localizedString(context, "cannot_export_to_folder"));
            return;
        }

        // Get export dpis
        var exportDpis = getPreferences(context, "export_dpis");
        if (!exportDpis) {
            exportDpis = Object.keys(DPIS);
        }

        var assetNameType = getPreferences(context, "asset_name_type");

        var loopExportNinePatches = exportNinePatches.objectEnumerator();
        var ninePatch;
        while (ninePatch = loopExportNinePatches.nextObject()) {

            var ninePatchContent = ninePatch.content;
            var ninePatchPatch = ninePatch.patch;
            var ninePatchName = assetName(ninePatchPatch.parentGroup(), assetNameType);

            // Patch lines round to pixel
            var loopNinePatchLines = ninePatchPatch.children().objectEnumerator();
            var line;
            while (line = loopNinePatchLines.nextObject()) {
                if (line.class() == "MSShapeGroup") {
                    line.absoluteRect().setX(Math.round(line.absoluteRect().x()));
                    line.absoluteRect().setY(Math.round(line.absoluteRect().y()));
                    var width = Math.round(line.absoluteRect().width()) < 1 ? 1 : Math.round(line.absoluteRect().width());
                    var height = Math.round(line.absoluteRect().height()) < 1 ? 1 : Math.round(line.absoluteRect().height());
                    line.absoluteRect().setWidth(width);
                    line.absoluteRect().setHeight(height);
                }
            }

            // Save nine-patch patch NSImage at mdpi
            var exportRequestForPatch = MSExportRequest.exportRequestsFromLayerAncestry(ninePatchPatch.ancestry()).firstObject();
            exportRequestForPatch.setFormat("png");
            exportRequestForPatch.setScale(1);
            var exporterForPatch = MSExporter.exporterForRequest_colorSpace(exportRequestForPatch, doc.colorSpace());
            var pathImage = exporterForPatch.image();

            // Nine-patch content
            var exportRequestForContent = MSExportRequest.exportRequestsFromLayerAncestry(ninePatchContent.ancestry()).firstObject();
            exportRequestForContent.setFormat("png");

            exportDpis.forEach(function(dpi) {

                var scale = dpiToScale(dpi);
                exportRequestForContent.setScale(scale);
                var exporterForContent = MSExporter.exporterForRequest_colorSpace(exportRequestForContent, doc.colorSpace());
                var contentImage = exporterForContent.image();
                var contentImageSize = contentImage.representations().firstObject().size();
                contentImage.setSize(contentImageSize);

                // Scale path lines
                var pathImageTop = cropAndScale(pathImage, 1, 0, pathImage.size().width - 2, 1, scale);
                var pathImageRight = cropAndScale(pathImage, pathImage.size().width - 1, 1, 1, pathImage.size().height - 2, scale);
                var pathImageBottom = cropAndScale(pathImage, 1, pathImage.size().height - 1, pathImage.size().width - 2, 1, scale);
                var pathImageLeft = cropAndScale(pathImage, 0, 1, 1, pathImage.size().height - 2, scale);

                var resultImageSize = CGSizeMake(contentImageSize.width + 2, contentImageSize.height + 2);
                var resultImage = NSImage.alloc().initWithSize(resultImageSize);
                resultImage.lockFocus();
                contentImage.drawAtPoint_fromRect_operation_fraction(
                    NSMakePoint(1, 1),
                    NSMakeRect(0, 0, contentImageSize.width, contentImageSize.height),
                    NSCompositeCopy,
                    1.0
                );
                pathImageTop.drawAtPoint_fromRect_operation_fraction(
                    NSMakePoint(1, resultImageSize.height - 1),
                    CGRectMake(0, 0, contentImageSize.width, 1),
                    NSCompositeCopy,
                    1.0
                );
                pathImageRight.drawAtPoint_fromRect_operation_fraction(
                    NSMakePoint(resultImageSize.width - 1, 1),
                    CGRectMake(0, 0, 1, contentImageSize.height),
                    NSCompositeCopy,
                    1.0
                );
                pathImageBottom.drawAtPoint_fromRect_operation_fraction(
                    NSMakePoint(1, 0),
                    CGRectMake(0, 0, contentImageSize.width, 1),
                    NSCompositeCopy,
                    1.0
                );
                pathImageLeft.drawAtPoint_fromRect_operation_fraction(
                    NSMakePoint(0, 1),
                    CGRectMake(0, 0, 1, contentImageSize.height),
                    NSCompositeCopy,
                    1.0
                );
                resultImage.unlockFocus();

                // Mkdir
                var outputFolder = exportFolder + "/drawable-" + dpi;
                var outputPath = outputFolder + "/" + ninePatchName + ".9.png";
                mkdir(outputFolder);

                // Save image
                var imageRepForResult = NSBitmapImageRep.imageRepWithData(resultImage.TIFFRepresentation());
                imageRepForResult.setSize(resultImageSize);
                var imageDataForResult = imageRepForResult.representationUsingType_properties(NSPNGFileType, nil);
                imageDataForResult.writeToFile_atomically(outputPath, "NO");

            });
        }

        toast(context, localizedString(context, "export_done"));

        if (getPreferences(context, "show_in_finder_after_export") == 1) {
            showInFinder(exportFolder);
        }
    }
};

function cropAndScale(nsimage, x, y, w, h, scale) {
    var originalImage = nsimage.copy();
    var imageCorp = NSImage.alloc().initWithSize(NSMakeSize(w, h));
    imageCorp.lockFocus();
    originalImage.drawAtPoint_fromRect_operation_fraction(
        NSMakePoint(0, 0),
        NSMakeRect(x, originalImage.size().height - h - y, w, h),
        NSCompositeCopy,
        1.0
    );
    imageCorp.unlockFocus();
    var scaledSize = NSMakeSize(Math.round(w * scale), Math.round(h * scale));
    var imageScale = NSImage.alloc().initWithSize(scaledSize);
    imageScale.lockFocus();
    imageCorp.setScalesWhenResized(true);
    imageCorp.setSize(scaledSize);
    NSGraphicsContext.currentContext().setImageInterpolation(NSImageInterpolationNone);
    imageCorp.drawAtPoint_fromRect_operation_fraction(
        NSMakePoint(0, 0),
        NSMakeRect(0, 0, scaledSize.width, scaledSize.height),
        NSCompositeCopy,
        1.0
    );
    imageScale.unlockFocus();
    return imageScale;
}

function getNinePatchAssetFromDocument(context) {
    var assets = NSMutableArray.alloc().init();
    var predicate = NSPredicate.predicateWithFormat(
        'className == "MSSliceLayer" && name == "#9patch" && exportOptions.firstFormat == "png"'
    );
    var ninePathSlices = context.document.allExportableLayers().filteredArrayUsingPredicate(predicate);
    var loopSlices = ninePathSlices.objectEnumerator();
    var slice;
    while (slice = loopSlices.nextObject()) {
        if (isNinePatchLayerGroup(slice)) {
            assets.addObject({
                "patch": getLayerWithNameFromParent("patch", slice.parentGroup().parentGroup()),
                "content": slice
            });
        }
    }
    return assets;
}

function getNinePatchAssetFromSelection(context) {
    var assets = NSMutableArray.alloc().init();
    var predicate = NSPredicate.predicateWithFormat(
        'className == "MSSliceLayer" && name == "#9patch" && exportOptions.firstFormat == "png"',
    );
    var selection = context.selection;
    selection.forEach(function(layer) {
        var ninePathSlices = layer.children().filteredArrayUsingPredicate(predicate);
        var loopSlices = ninePathSlices.objectEnumerator();
        var slice;
        while (slice = loopSlices.nextObject()) {
            if (isNinePatchLayerGroup(slice)) {
                assets.addObject({
                    "patch": getLayerWithNameFromParent("patch", slice.parentGroup().parentGroup()),
                    "content": slice
                });
            }
        }
    });
    return assets;
}

function isNinePatchLayerGroup(sliceLayer) {
    var result = false;
    if(sliceLayer.parentGroup().parentGroup().class() != "MSPage") {
        var root = sliceLayer.parentGroup().parentGroup();
        if(
            (root.layers().indexOfObject(getLayerWithNameFromParent("patch", root)) < root.layers().count()) &&
            sliceLayer.parentGroup().name() == "content"
        ) {
            result = true;
        }
    }
    return result;
}
