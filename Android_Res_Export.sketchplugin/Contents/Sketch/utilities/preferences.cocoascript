@import "../lib/common.js";

var onRun = function(context) {

    // Dialog
    var dialog = COSAlertWindow.alloc().init();
    dialog.setMessageText(localizedString(context, "preferences"));

    // Icon
    var iconPath = context.plugin.urlForResourceNamed("icon.png").path();
    var iconNSImage = NSImage.alloc().initWithContentsOfFile(iconPath);
    dialog.setIcon(iconNSImage);

    // TODO:
    // Export dpis
    dialog.addAccessoryView(groupLabel(localizedString(context, "export_dpis")));
    var exportDpisView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 40));
    exportDpisView.setFlipped(true);
    var exportDpis = getPreferences(context, "export_dpis");


    var exportMDPI = checkBox(true, "MDPI", NSMakeRect(0, 0, 100, 16));
    var exportHDPI = checkBox(true, "HDPI", NSMakeRect(100, 0, 100, 16));
    var exportXHDPI = checkBox(true, "XHDPI", NSMakeRect(200, 0, 100, 16)));
    var exportXXHDPI = checkBox(true, "XXHDPI", NSMakeRect(0, 24, 100, 16));
    var exportXXXHDPI = checkBox(true, "XXXHDPI", NSMakeRect(100, 24, 100, 16)));
    exportDpisView.addSubview(exportMDPI);
    exportDpisView.addSubview(exportHDPI);
    exportDpisView.addSubview(exportXHDPI);
    exportDpisView.addSubview(exportXXHDPI);
    exportDpisView.addSubview(exportXXXHDPI);
    dialog.addAccessoryView(exportDpisView);

    // Asset name type
    dialog.addAccessoryView(groupLabel(localizedString(context, "asset_name_type")));
    var assetNameType = popupButton(ASSET_NAME_TYPES);
    var currentAssetNameType = getPreferences(context, "asset_name_type");

    log(currentAssetNameType)
    var currentAssetNameTypeIndex = currentAssetNameType != null ? currentAssetNameType : 0
    assetNameType.selectItemAtIndex(currentAssetNameTypeIndex);
    dialog.addAccessoryView(assetNameType);

    // Vector drawable folder
    dialog.addAccessoryView(groupLabel(localizedString(context, "vector_drawable_folder")));
    var vectordrawableFolder = popupButton(VECTORDRAWABLE_FOLDERS);
    var currentVectorFolder = getPreferences(context, "vector_drawable_folder");
    var currentVectorFolderIndex = currentVectorFolder ? currentVectorFolder : 0;
    vectordrawableFolder.selectItemAtIndex(currentVectorFolderIndex);
    dialog.addAccessoryView(vectordrawableFolder);

    // Language
    dialog.addAccessoryView(groupLabel(localizedString(context, "change_language")));
    var language = popupButton(Object.values(LANGUAGES));
    var currentLanguage = getPreferences(context, "language");
    var currentLanguageIndex = currentLanguage ? Object.keys(LANGUAGES).indexOf(String(currentLanguage)) : 0;
    language.selectItemAtIndex(currentLanguageIndex);
    dialog.addAccessoryView(language);

    // Show in folder
    dialog.addAccessoryView(groupLabel(localizedString(context, "others")));
    var checkboxFinder = checkBox(
        getPreferences(context, "show_in_finder_after_export") == 1 ? true : false,
        localizedString(context, "show_in_finder_after_export")
    );
    dialog.addAccessoryView(checkboxFinder);

    dialog.addButtonWithTitle(localizedString(context, "ok"));
    dialog.addButtonWithTitle(localizedString(context, "cancel"));

    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        setPreferences(context, "asset_name_type", assetNameType.indexOfSelectedItem());

        setPreferences(context, "vector_drawable_folder", vectordrawableFolder.indexOfSelectedItem());

        var languageIndex = String(language.indexOfSelectedItem());
        var languageFileURL = context.plugin.urlForResourceNamed("manifest_" + Object.keys(LANGUAGES)[languageIndex] + ".json");
        if (fileExists(languageFileURL.path())) {
            var manifestFilePath = context.plugin.url().path() + "/Contents/Sketch/manifest.json";
            var languageFilePath = languageFileURL.path();
            // Remove manifest.json
            NSFileManager.defaultManager().removeItemAtPath_error_(
                manifestFilePath, nil
            );
            // Replace manifest.json
            NSFileManager.defaultManager().copyItemAtPath_toPath_error_(
                languageFilePath, manifestFilePath, nil
            );
            // User Default
            setPreferences(context, "language", Object.keys(LANGUAGES)[languageIndex]);
            // Reload Plugin
            AppController.sharedInstance().pluginManager().reloadPlugins();
        } else {
            var app = NSApplication.sharedApplication();
            app.displayDialog_withTitle_(
                localizedString(context, "language_file_not_found_desc", context.plugin.url().path() + "/Contents/Resources/manifest_" + Object.keys(LANGUAGES)[languageIndex] + ".json"),
                localizedString(context, "language_file_not_found")
            );
        }

        setPreferences(context, "show_in_finder_after_export", checkboxFinder.state() == NSOnState ? true : false);

    }

    ga(context, "Setting", "preferences");

};

function groupLabel(text) {
    var view = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 300, 16));
    view.setStringValue(String(text).toUpperCase());
    view.setFont(NSFont.systemFontOfSize(11));
    view.setTextColor(NSColor.grayColor());
    view.setBezeled(false);
    view.setDrawsBackground(false);
    view.setEditable(false);
    view.setSelectable(false);
    return view;
}

function checkBox(status, title, rect) {
    rect = rect || NSMakeRect(0, 0, 300, 16)
    var view = NSButton.alloc().initWithFrame(rect);
    view.setButtonType(NSSwitchButton);
    view.setTitle(title);
    if (status == true) {
        view.setState(NSOnState);
    } else {
        view.setState(NSOffState);
    }
    return view;
}

function popupButton(items) {
    var view = NSPopUpButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 24));
    items.forEach(function(item) {
        view.addItemWithTitle("");
        view.lastItem().setTitle(item);
    });
    return view;
}

function divider() {
    var view = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 1));
    view.setWantsLayer(true);
    view.layer().setBackgroundColor(CGColorCreateGenericRGB(0, 0, 0, 0.1));
    return view;
}
