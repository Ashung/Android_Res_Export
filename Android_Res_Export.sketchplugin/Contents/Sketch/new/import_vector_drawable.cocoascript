//
// Android Res Export
// Homepage: https://github.com/Ashung/Android_Res_Export
// Author: Ashung Hung
// Email: Ashung.hung@gmail.com
// License: https://creativecommons.org/licenses/by-sa/4.0

@import "../lib/common.js";


var f = "/System_Icons/assets/drawable-anydpi-v21/ic_account_add.xml"

// default
var defaultValue = {
    width: 24,
    height: 24,
    pathData: "M0,0L0,24L24,24L24,0z"
}

// clean XML code
var vectorDrawable = getContentFromFile(f);
    vectorDrawable = vectorDrawable.replace(/<\?xml.*?\?>/g, "");
    vectorDrawable = vectorDrawable.replace(/\n*/g, "");
    vectorDrawable = vectorDrawable.replace(/\s+/g, " ");
    vectorDrawable = vectorDrawable.replace(/>\s+</g, "><");
    vectorDrawable = vectorDrawable.replace(/<!--.*?-->/g, "");

log(vectorDrawable)
log("-----------")
log(vectorDrawableToSVG(vectorDrawable));



function vectorDrawableToSVG(vectorDrawable) {
    var svg = '<svg xmlns="http://www.w3.org/2000/svg"';


    var width = parseInt(/<vector[^<]*android:width=\"(\w+)\"/.exec(vectorDrawable)[1]) || defaultValue.width,
        height = parseInt(/<vector[^<]*android:height=\"(\w+)\"/.exec(vectorDrawable)[1]) || defaultValue.height,
        viewportWidth = parseInt(/<vector[^<]*android:viewportWidth=\"(\w+)\"/.exec(vectorDrawable)[1]) || defaultValue.width,
        viewportHeight = parseInt(/<vector[^<]*android:viewportHeight=\"(\w+)\"/.exec(vectorDrawable)[1]) || defaultValue.height;

    svg += ' width="' + width + 'px"';
    svg += ' height="' + height + 'px"';
    svg += ' viewBox="0 0 ' + viewportWidth + ' ' + viewportHeight + '">\n'

    // log(/<vector[^<]*android:viewportWidth=\"(\w+)\"/.exec(vectorDrawable)[1]);
    var paths = vectorDrawable.match(/<path[^<]*\/>/g);
    for (var i = 0; i < paths.length; i++) {
        var path = paths[i];
        var pathAttrs = {};

        var fillColorRegex = /android:fillColor="([^\s]*)"/i;
        if (fillColorRegex.test(path)) {
            var fill = androidColorToSVG(fillColorRegex.exec(path)[1]);
            if (fill.color) {
                pathAttrs.fillColor = fill.color;
            }
            if (fill.alpha) {
                pathAttrs.fillAlpha = fill.alpha;
            }
        }

        var fillAlphaRegex = /android:fillAlpha="([^\s]*)"/i;
        if (fillAlphaRegex.test(path)) {
            pathAttrs.fillAlpha = fillAlphaRegex.exec(path)[1];
        }

        var strokeColorRegex = /android:strokeColor="([^\s]*)"/i;
        if (strokeColorRegex.test(path)) {
            var stroke = androidColorToSVG(strokeColorRegex.exec(path)[1]);
            if (stroke.color) {
                pathAttrs.strokeColor = stroke.color;
            }
            if (fill.alpha) {
                pathAttrs.strokeAlpha = stroke.alpha;
            }
        }

        var strokeAlphaRegex = /android:strokeAlpha="([^\s]*)"/i;
        if (strokeAlphaRegex.test(path)) {
            pathAttrs.strokeAlpha = strokeAlphaRegex.exec(path)[1];
        }

        svg += '<path';

        if (pathAttrs.fillColor) {
            svg += ' fill="' + pathAttrs.fillColor + '"';
        }
        if (pathAttrs.fillAlpha) {
            svg += ' fill-opacity="' + pathAttrs.fillAlpha + '"';
        }
        if (pathAttrs.strokeColor) {
            svg += ' stroke="' + pathAttrs.strokeColor + '"';
        }
        if (pathAttrs.strokeAlpha) {
            svg += ' stroke-opacity="' + pathAttrs.strokeAlpha + '"';
        }

        var strokeWidthRegex = /android:strokeWidth="([^\s]*)"/i;
        if (strokeWidthRegex.test(path)) {
            // pathAttrs.strokeWidth = strokeWidthRegex.exec(path)[1];
            svg += ' stroke-width="' + strokeWidthRegex.exec(path)[1] + '"';
        }

        var strokeLineCapRegex = /android:strokeLineCap="([^\s]*)"/i;
        if (strokeLineCapRegex.test(path)) {
            // pathAttrs.strokeLineCap = strokeLineCapRegex.exec(path)[1];
            svg += ' stroke-linecap="' + strokeLineCapRegex.exec(path)[1] + '"';
        }

        var strokeLineJoinRegex = /android:strokeLineJoin="([^\s]*)"/i;
        if (strokeLineJoinRegex.test(path)) {
            // pathAttrs.strokeLineJoin = strokeLineJoinRegex.exec(path)[1];
            svg += ' stroke-linejoin="' + strokeLineJoinRegex.exec(path)[1] + '"';
        }

        var strokeMiterLimitRegex = /android:strokeMiterLimit="([^\s]*)"/i;
        if (strokeMiterLimitRegex.test(path)) {
            // pathAttrs.strokeMiterLimit = strokeMiterLimitRegex.exec(path)[1];
            svg += ' stroke-miterlimit="' + strokeMiterLimitRegex.exec(path)[1] + '"';
        }

        var fillTypeRegex = /android:fillType="([^\s]*)"/i;
        if (fillTypeRegex.test(path)) {
            // pathAttrs.fillType = fillTypeRegex.exec(path)[1].toLowerCase();
            svg += ' fill-rule="' + fillTypeRegex.exec(path)[1].toLowerCase() + '"';
        }

        var pathDataRegex = /android:pathData="([^=].*)"/i;
        if (pathDataRegex.test(path)) {
            // pathAttrs.pathData = pathDataRegex.exec(path)[1];
            svg += ' d="' + pathDataRegex.exec(path)[1] + '"';
        } else {
            svg += ' d="' + defaultValue.pathData + '"';
        }

        svg += '/>\n'

    }


    // log(paths);


    svg += '</svg>'

    return svg;


    // <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
    // <path d="M23 19v1H9v-1c0-2.76 3.13-5 7-5s7 2.24 7 5zm-7-7a4 4 0 1 1 0-8 4 4 0 0 1 0 8zM4 11V8h2v3h3v2H6v3H4v-3H1v-2h3z"/>
    // </svg>
}

function androidColorToSVG(color) {
    var result = {};
    if (/^#[0-9A-F]{3}$/i.test(color)) {
        result.color = ("#" + color[1] + color[1] + color[2] + color[2] + color[3] + color[3]).toUpperCase();
    }
    if (/^#[0-9A-F]{4}$/i.test(color)) {
        result.color = ("#" + color[2] + color[2] + color[3] + color[3] + color[4] + color[4]).toUpperCase();
        result.alpha = (parseInt("0x" + color[1] + color[1], 16) / 255).toFixed(2);
    }
    if (/^#[0-9A-F]{6}$/i.test(color)) {
        result.color = (color).toUpperCase();
    }
    if (/^#[0-9A-F]{8}$/i.test(color)) {
        result.color = ("#" + color.substr(3)).toUpperCase();
        result.alpha = (parseInt("0x" + color.substr(1, 2), 16) / 255).toFixed(2);
    }
    return result;
}


var onRun = function(context) {



    for (var i = 0; i < vectorDrawable.length; i ++) {
        var svgFile = tempFolder + "/" + vectorDrawable[i]["id"] + ".svg"
        var svg = getContentFromFile(svgFile);

        // Clean SVG code
        svg = svg.replace(/\n*/g, "");
        svg = svg.replace(/>\s+</g, "><");
        svg = svg.replace(/<!--.*?-->/g, "");
        svg = svg.replace(/<\?xml.*?\?>/g, "");
        svg = svg.replace(/<desc>.*?<\/desc>/g, "");
        svg = svg.replace(/<g[^<]*>/g, "");
        svg = svg.replace(/<\/g>/g, "");
        svg = svg.replace(/<mask.*?<\/mask>/g, "");
        svg = svg.replace(/<image.*?<\/image>/g, "");
        svg = svg.replace(/<title.*?<\/title>/g, "");
        // replace use tag
        svg = svg.replace(/(<use)([^<]*?)(xlink:href="#)([^<]*?)(")([^<]*?)(><\/use>)/g, function(match, p1, p2, p3, p4, p5, p6, offset, string) {
            originalTagRegex = new RegExp('<(\\w+)[^<]*id="' + p4 + '"[^<]*><\/(\\w+)>');
            var originalTag = svg.match(originalTagRegex)[0];
            var attributes = (p2 + p6).replace(/id=".*?"/, "");
            return originalTag.replace(">", attributes + ">");
        });
        svg = svg.replace(/<defs>.*?<\/defs>/, "");
        // bounds layer
        svg = svg.replace(/<\w+[^<]*id="#"[^<]*><\/\w+>/, "");
        // Ellipse to path
        svg = svg.replace(/(<ellipse)([^<]*?)(><\/ellipse>)/g, function(match, p1, p2, p3, offset, string) {
            var cx = /\scx="(.*?)"/.exec(p2)[1];
            var cy = /\scy="(.*?)"/.exec(p2)[1];
            var rx = /\srx="(.*?)"/.exec(p2)[1];
            var ry = /\sry="(.*?)"/.exec(p2)[1];
            var attributes = p2.replace(/\scx=".*?"/, "")
                               .replace(/\scy=".*?"/, "")
                               .replace(/\srx=".*?"/, "")
                               .replace(/\sry=".*?"/, "");
            var pathData = ellipseToPath(parseFloat(cx), parseFloat(cy), parseFloat(rx), parseFloat(ry));
            var code = '<path ' + attributes + ' d="' + pathData + '"></path>';
            return code;
        });
        // Circle to path
        svg = svg.replace(/(<circle)([^<]*?)(><\/circle>)/g, function(match, p1, p2, p3, offset, string) {
            var cx = /\scx="(.*?)"/.exec(p2)[1];
            var cy = /\scy="(.*?)"/.exec(p2)[1];
            var r = /\sr="(.*?)"/.exec(p2)[1];
            var attributes = p2.replace(/\scx=".*?"/, "")
                               .replace(/\scy=".*?"/, "")
                               .replace(/\sr=".*?"/, "");
            var pathData = circleToPath(parseFloat(cx), parseFloat(cy), parseFloat(r));
            var code = '<path ' + attributes + ' d="' + pathData + '"></path>';
            return code;
        });
        // SVGO
        // rect, line, polyline, polygon can convert to path by SVGO
        svg = optimizeSVG(svg);
        // svg to vector drawable
        var xml = svgToVectorDrawable(svg);

        log(svg);
        log(xml);

        // Create "drawable-anydpi-v21" folder
        mkdir(vectorDrawableFolder);

        // Create XML
        writeContentToFile(
            vectorDrawableFolder + "/" +vectorDrawable[i]["name"] + ".xml",
            xml
        );

    }

    // Report file
    if (reportInfo.length > 0) {
        writeContentToFile(reportFile, reportInfo.toString().replace(/,/g, "\n"));
    } else {
        if (fileExists(reportFile)) {
            rm(reportFile);
        }
    }

    rm(tempFolder);

    toast(context, "Export vector drawable to \"" + vectorDrawableFolder + "\". Done!");

}

function svgToVectorDrawable(svg) {
    var xml = '<?xml version="1.0" encoding="utf-8"?>\n';
    xml += '<vector xmlns:android="http://schemas.android.com/apk/res/android"\n';

    var width = /<svg[^<]*width=\"(\d+)"/.exec(svg)[1];
    var height = /<svg[^<]*height=\"(\d+)"/.exec(svg)[1];
    var viewportWidth = /<svg[^<]*viewBox=\"-?\d+ -?\d+ (\d+) \d+"/.exec(svg)[1];
    var viewportHeight = /<svg[^<]*viewBox=\"-?\d+ -?\d+ \d+ (\d+)"/.exec(svg)[1];

    xml += '    android:width="' + width + 'dp"\n';
    xml += '    android:height="' + height + 'dp"\n';
    xml += '    android:viewportWidth="' + viewportWidth + '"\n';
    xml += '    android:viewportHeight="' + viewportHeight + '">\n';

    var tags = svg.match(/<path[^<]*\/>/g);
    for (var i = 0; i < tags.length; i++) {
        var path = '<path';

        var fillRegex = /\sfill="(#[0-9a-z]{3,6})"/i;
        if (fillRegex.test(tags[i])) {
            var color = fillRegex.exec(tags[i])[1];
            path += ' android:fillColor="' + color + '"';
        } else {
            path += ' android:fillColor="#000000"';
        }

        var opacityRegex = /\sopacity="([0-9\.]+)"/;
        if (opacityRegex.test(tags[i])) {
            var opacity = parseFloat(opacityRegex.exec(tags[i])[1]).toFixed(2);
            path += ' android:alpha="' + opacity + '"';
        }

        var fillOpacityRegex = /\sfill-opacity="([0-9\.]+)"/;
        if (fillOpacityRegex.test(tags[i])) {
            var fillOpacity = parseFloat(fillOpacityRegex.exec(tags[i])[1]).toFixed(2);
            path += ' android:fillAlpha="' + fillOpacity + '"';
        }

        var strokeRegex = /\sstroke="(#[0-9a-z]{3,6})"/;
        if (strokeRegex.test(tags[i])) {
            var stroke = strokeRegex.exec(tags[i])[1];
            path += ' android:strokeColor="' + stroke + '"';
        }

        var strokeWidthRegex = /\sstroke-width="([0-9\.]+)"/;
        if (strokeWidthRegex.test(tags[i])) {
            var strokeWidth = strokeWidthRegex.exec(tags[i])[1];
            path += ' android:strokeWidth="' + strokeWidth + '"';
        }

        var strokeOpacityRegex = /\sstroke-opacity="([0-9\.]+)"/;
        if (strokeOpacityRegex.test(tags[i])) {
            var strokeOpacity = parseFloat(strokeOpacityRegex.exec(tags[i])[1]).toFixed(2);
            path += ' android:strokeAlpha="' + strokeOpacity + '"';
        }

        var strokeLineCapRegex = /\sstroke-linecap="(\w+)"/;
        if (strokeLineCapRegex.test(tags[i])) {
            var strokeLineCap = strokeLineCapRegex.exec(tags[i])[1];
            path += ' android:strokeLineCap="' + strokeLineCap + '"';
        }

        var strokeLineJoinRegex = /\sstroke-linejoin="(\w+)"/;
        if (strokeLineJoinRegex.test(tags[i])) {
            var strokeLineJoin = strokeLineJoinRegex.exec(tags[i])[1];
            path += ' android:strokeLineCap="' + strokeLineJoin + '"';
        }

        var pathData = /\sd="(.*?)"/i.exec(tags[i])[1];
        path += ' android:pathData="' + pathData + '"/>\n';

        xml += '    ' + path;
    }

    xml += '</vector>';
    return xml;
}

function ellipseToPath(cx, cy, rx, ry) {
    var controlDistanceX = rx * 0.5522847498307935;
    var controlDistanceY = ry * 0.5522847498307935;
    var d = 'M' + cx + ',' + (cy - ry) + ',' +
            'C' + (cx + controlDistanceX) + ',' + (cy - ry) + ',' + (cx + rx) + ',' + (cy - controlDistanceY) + ',' + (cx + rx) + ',' + cy + ',' +
            'C' + (cx + rx) + ',' + (cy + controlDistanceY) + ',' + (cx + controlDistanceX) + ',' + (cy + ry) + ','  + cx + ',' + (cy + ry) + ',' +
            'C' + (cx - controlDistanceX) + ',' + (cy + ry) + ',' + (cx - rx) + ',' + (cy + controlDistanceY) + ',' + (cx - rx) + ',' + cy + ',' +
            'C' + (cx - rx) + ',' + (cy - controlDistanceY) + ',' + (cx - controlDistanceX) + ',' + (cy - ry) + ',' + cx + ',' + (cy - ry) + 'z';
    return d;
}

function circleToPath(cx, cy, r) {
    var d = 'M' + (cx-r) + ',' + cy +
            'a' + r + ',' + r + ' 0 0,1 ' + r*2 + ',0' +
            'a' + r + ',' + r + ' 0 0,1 -' + r*2 + ',0z';
    return d;
}
