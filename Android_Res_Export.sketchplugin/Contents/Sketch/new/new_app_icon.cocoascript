/*----------------------------------------------------------

Android Res Export
https://github.com/Ashung/Android_Res_Export

Copyright 2017 Ashung Hung (Ashung.hung@gmail.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------*/

@import "../lib/common.js";

var newAppIconTemplate = function(context) {

    importFromResource_toPage_withMetadate(
        context,
        "app_icon_template.sketch",
        "App Icon",
        {
            "is_android_app_icon_template": true,
            "is_legacy_android_app_icon": false
        }
    );

    ga(context, "New", "new_app_icon");

}

var newAppIconTemplateLegacy = function(context) {

    importFromResource_toPage_withMetadate(
        context,
        "app_icon_template_legacy.sketch",
        "App Icon Legacy",
        {
            "is_android_app_icon_template": true,
            "is_legacy_android_app_icon": true
        }
    );

    ga(context, "New", "new_app_icon_legacy");

}

function importFromResource_toPage_withMetadate(context, resource, pageName, metadata) {

    var doc = context.document;

    // Template file.
    var template = context.plugin.urlForResourceNamed(resource);

    if (!template) {
        // Template file path.
        var templatePath = context.plugin.url().path().lastPathComponent() + "/Contents/Resources/" + resource;
        toast(context, localizedString(context, 'template_no_exists', templatePath));
        return;
    }

    // Create new page.
    var pageForIcon = doc.addBlankPage();
    pageForIcon.setName(pageName);

    // Read data from Sketch file.
    var templateDocument = MSDocument.alloc().init();
    templateDocument.readFromURL_ofType_error(template, "com.bohemiancoding.sketch.drawing", nil);

    if (templateDocument.currentPage().layers().count() == 0) {
        return;
    }

    // Old symbolID to new symbolID mapping.
    var symbolIDMapping = NSMutableDictionary.alloc().init();
    var allSymbols = templateDocument.documentData().allSymbols();
    var loopAllSymbols = allSymbols.objectEnumerator();
    var symbol;
    while (symbol = loopAllSymbols.nextObject()) {
        symbolIDMapping.setObject_forKey(
            symbol.generateObjectID(),
            symbol.symbolID()
        );
    }

    // Change all objectID and symbolID
    var templatePage = templateDocument.pages().firstObject();
    var loopChildren = templatePage.children().objectEnumerator();
    var child;
    while (child = loopChildren.nextObject()) {
        child.setObjectID(child.generateObjectID());
        child.setLayerListExpandedType(1);
        if (child.class() == "MSSymbolMaster" || child.class() == "MSSymbolInstance") {
            var newSymbolID = symbolIDMapping.objectForKey(child.symbolID());
            child.setSymbolID(newSymbolID);
        }
    }

    // Add layers.
    pageForIcon.addLayers(templatePage.layers());

    // Add metadata to page.
    for (key in metadata) {
        pageForIcon.storeMetadata_forKey(metadata[key], key);
    }

    // Centere layers in canvas.
    doc.currentView().centerLayersInCanvas();

}
